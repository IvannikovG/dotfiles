set nocompatible
set termguicolors

call plug#begin('~/.vim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
      \ 'coc-tsserver',
      \ 'coc-html',
      \ 'coc-lists',
      \ 'coc-phpls',
      \ 'coc-sh',
      \ 'coc-css',
      \ 'coc-stylelint',
      \ 'coc-vimlsp',
      \ 'coc-json',
      \ 'coc-eslint',
      \ 'coc-python',
      \ 'coc-git',
      \ 'coc-java',
      \ 'coc-jest',
      \ 'coc-solargraph',
      \ 'coc-yaml',
      \ 'coc-highlight',
      \ 'coc-snippets',
      \ 'coc-docker',
      \ 'coc-diagnostic',
      \ 'coc-prettier',
      \ 'coc-explorer',
      \ 'coc-pairs',
      \ 'coc-stylelint',
      \]

Plug 'christoomey/vim-tmux-navigator'

" Syntax support:
Plug 'sheerun/vim-polyglot'
Plug 'suy/vim-context-commentstring'

" A universal set of defaults that (hopefully) everyone can agree on.
Plug 'tpope/vim-sensible'

"The vim-indent-object plugin adds yet another text object to Vim, this one
"based on the indentation of the current cursor line. This new text object is
"invoked by either i or I. Some examples:
Plug 'michaeljsmith/vim-indent-object'

" All trailing whitespace characters (see Supported Whitespace Characters below) to be highlighted
Plug 'ntpeters/vim-better-whitespace'

" Whenever you are in the insert mode and paste into your terminal emulator using command+v, shift+insert, ctrl+shift+v or middle-click, vim will automatically :set paste for you.
Plug 'ConradIrwin/vim-bracketed-paste'


" Automatically restore one file's cursor position and folding information after restart vim
Plug 'vim-scripts/restore_view.vim'

Plug 'jlanzarotta/bufexplorer'
Plug 'tpope/vim-surround'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'

" Pairs of handy bracket mappings
Plug 'tpope/vim-unimpaired'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'


Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" always highlights the enclosing html/xml tags
Plug 'Valloric/MatchTagAlways'

" Auto close (X)HTML tags
Plug 'alvan/vim-closetag'

" Use <Leader> to access system clipboard in Vim
Plug 'lxhillwind/leader-clipboard'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'


" ColorSchemas
Plug 'romainl/flattened'

" Vim plugin that provides additional text objects
Plug 'wellle/targets.vim'

Plug 'rhysd/git-messenger.vim'

Plug 'mbbill/undotree'

call plug#end()


let mapleader = "\<Space>"

nnoremap <Leader>u :UndotreeToggle<CR>

" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

" Enable hotkeys for Russian layout
" https://habr.com/post/98393/
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
inoremap <c-l> <c-^>

set number relativenumber
set numberwidth=1

if has('mouse')
  set mouse=a
endif

" Don't redraw while executing macros (good performance config)
set lazyredraw
set ttyfast


set cursorline
set cursorcolumn
set hidden
set nofoldenable
set wrap
set linebreak
set hlsearch
set ignorecase
set smartcase

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile

set showcmd       " display incomplete commands
set autowrite     " Automatically :write before running commands

set expandtab
set softtabstop=2
set shiftwidth=2
set tabstop=4

set splitbelow
set cmdheight=1
set scrolloff=3

" Breaking long line with the same indentation.
set breakindent

set foldmethod=syntax
let javaScript_fold=1
set foldlevelstart=99
syntax on

" ====solorized_flattened_settings===
" set background=light
set background=dark
colorscheme flattened_dark
set fillchars+=vert:â”‚
" colorscheme flattened_light
hi VertSplit ctermfg=NONE ctermbg=NONE guibg=NONE
hi Normal ctermfg=12  ctermbg=NONE  guifg=#839496  guibg=#002b36  gui=NONE

hi SignColumn cterm=NONE  ctermfg=3  ctermbg=0  guifg=#839496  guibg=#073642  gui=NONE

hi CursorLine cterm=NONE  ctermbg=0  guibg=#08323D  guisp=#93a1a1  gui=NONE
hi CursorColumn cterm=NONE  ctermbg=0  guibg=#08323D  gui=NONE
hi CursorLineNr cterm=NONE ctermbg=0 ctermfg=3  guifg=#b58900  guibg=#073642 gui=NONE

hi EndOfBuffer ctermfg=NONE ctermbg=NONE

hi CocInfoSign ctermfg=4 ctermbg=0 guibg=#073642
hi CocWarningSign ctermfg=3 ctermbg=0 guifg=#b58900 guibg=#073642
hi CocWarningHighlight cterm=underline ctermfg=3
hi CocWarningFloat ctermbg=0 ctermfg=3 guifg=#b58900 guibg=#073642
hi CocErrorSign ctermfg=1 ctermbg=0 guifg=#dc322f guibg=#073642
hi CocErrorHighlight cterm=underline ctermfg=1
hi CocErrorFloat ctermbg=0 ctermfg=1 guifg=#dc322f
hi CocFloating ctermbg=0 ctermfg=4 guibg=#083743
hi NormalFloat ctermbg=0 ctermfg=4 guibg=#083743
" ========================
"

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

""" Basics Keymaps

" Turn off linewise keys. Normally, the `j' and `k' keys move the cursor down one entire line. with line wrapping on, this can cause the cursor to actually skip a few lines on the screen because it's moving from line N to line N+1 in the file. I want this to act more visually -- I want `down' to mean the next line on the screen
nnoremap <expr> j v:count == 0 ? 'gj' : 'j'
nnoremap <expr> k v:count == 0 ? 'gk' : 'k'
vnoremap <expr> j v:count == 0 ? 'gj' : 'j'
vnoremap <expr> k v:count == 0 ? 'gk' : 'k'


" Edit .vimrc
map <leader>vl :edit $MYVIMRC<CR>
map <leader>vr :source $MYVIMRC<CR>

nnoremap <leader>b :BufExplorer<CR>

" Spell-checking
set spell spelllang=ru_yo,en_us
" Spell-checking higlighting settings
hi clear SpellBad
hi SpellBad cterm=underline
hi clear SpellRare
hi SpellRare cterm=underline
hi clear SpellCap
hi SpellCap cterm=underline
hi clear SpellLocal
hi SpellLocal cterm=underline

"""" Plugin Settings

"" vim-closetag:
let g:closetag_filenames = '*.html,*.erb,*.jsx,*.js, *.tsx'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx, *.tsx'


" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

nnoremap <Leader>w :w<CR>

" FZF :Files use ag and ignore files from gitignore:
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <leader>fc :Commits<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fa :Ag<CR>
nnoremap <leader>fb :Buffers<CR>
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)


nmap <silent> // :nohlsearch<CR>

" Allows you to enter sudo pass and save the file
" " when you forgot to open your file with sudo
cmap w!! %!sudo tee > /dev/null %


let g:bufExplorerDisableDefaultKeyMapping=1
let g:bufExplorerShowRelativePath=1



augroup common
  autocmd BufEnter * EnableStripWhitespaceOnSave
augroup END

" Set comments for racket and schema:
autocmd FileType racket,scheme setlocal commentstring=;;\ %s
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.jsx

nmap <silent> <leader><leader> :CocCommand explorer
      \ --toggle
      \ --width=45
      \ <CR>


" if hidden not set, TextEdit might fail.
set hidden


" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
set shortmess+=I " disable start screen
set shortmess+=c


" always show signcolumns
set signcolumn=yes
" set signcolumn=auto:2
set pastetoggle=<F3>

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"


" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <leader>cd <Plug>(coc-definition)
nmap <leader>cy <Plug>(coc-type-definition)
nmap <leader>ci <Plug>(coc-implementation)
nmap <leader>cr <Plug>(coc-references)

nmap <leader>cl :CocList --number-select<cr>
nmap <leader>cL :CocListResume <cr>
nnoremap <silent> <leader>cy  :<C-u>CocList -A --normal yank<cr>


" Use K for show documentation in preview window
nnoremap <silent><leader>cD :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format)

" Setup formatexpr specified filetype(s).
augroup mygroup
  autocmd!
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ca  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>cx  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
let g:airline#extensions#ale#enabled = 1
let g:airline_theme='solarized'
let g:airline#extensions#keymap#enabled = 0
let g:airline_detect_spell=0
let g:airline_detect_spelllang=0
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
" let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
